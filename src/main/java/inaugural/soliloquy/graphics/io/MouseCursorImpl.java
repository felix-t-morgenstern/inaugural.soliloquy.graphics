package inaugural.soliloquy.graphics.io;

import inaugural.soliloquy.tools.Check;
import soliloquy.specs.graphics.io.MouseCursor;
import soliloquy.specs.graphics.renderables.providers.ProviderAtTime;
import soliloquy.specs.graphics.rendering.timing.GlobalClock;

import java.util.Map;

import static org.lwjgl.glfw.GLFW.glfwSetCursor;

public class MouseCursorImpl implements MouseCursor {
    private final Map<String, ProviderAtTime<Long>> MOUSE_CURSORS;
    private final GlobalClock GLOBAL_CLOCK;

    private ProviderAtTime<Long> _mouseCursorProvider;
    private long _mostRecentCursor;

    public MouseCursorImpl(Map<String, ProviderAtTime<Long>> mouseCursors,
                           GlobalClock globalClock) {
        MOUSE_CURSORS = Check.ifNull(mouseCursors, "mouseCursors");
        GLOBAL_CLOCK = Check.ifNull(globalClock, "globalClock");
    }

    @Override
    public void setMouseCursor(String mouseCursorId) throws IllegalArgumentException {
        Check.ifNullOrEmpty(mouseCursorId, "mouseCursorId");
        _mouseCursorProvider = Check.ifNull(MOUSE_CURSORS.get(mouseCursorId),
                "mouse cursor provider corresponding to " + mouseCursorId);
    }

    @Override
    public void updateCursor(long windowId) {
        if (_mouseCursorProvider != null) {
            Long cursor = Check.ifNull(
                    _mouseCursorProvider.provide(GLOBAL_CLOCK.globalTimestamp()),
                    "cursor generated by current mouse cursor provider");
            if (cursor != _mostRecentCursor) {
                glfwSetCursor(windowId, _mostRecentCursor = cursor);
            }
        }
    }

    @Override
    public String getInterfaceName() {
        return MouseCursor.class.getCanonicalName();
    }
}
